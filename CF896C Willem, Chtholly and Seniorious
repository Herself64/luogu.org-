#include<bits/stdc++.h>
#define IT set<node>::iterator
#define ODT chtholly_tree
using namespace std;
typedef long long ll;
struct node {
	ll l,r;
	mutable ll v;
	node (ll L,ll R=-1,ll V=0) {l=L,r=R,v=V;}
	bool operator <(const node& o) const {return l<o.l;}
};
set<node> chtholly_tree;
ll n,m,seed,vmax,a[100005];
IT split (ll p) {
	IT it=ODT.lower_bound(node(p));
	if (it!=ODT.end()&&it->l==p) {
		return it;
	}
	--it;
	ll L=it->l,R=it->r,V=it->v;
	ODT.erase(it);
	ODT.insert(node(L,p-1,V));
	return ODT.insert(node(p,R,V)).first;
}
ll rnd () {
	ll ret=seed;
	seed=(seed*7+13)%1000000007;
	return ret;
}
void add (ll x,ll y,ll k) { //op==1;
	IT itr=split(y+1),itl=split(x);
	for (;itl!=itr;++itl) {itl->v+=k;}
}
void assign (ll x,ll y,ll k) { // op==2;
	IT itr=split(y+1),itl=split(x);
	ODT.erase(itl,itr);
	ODT.insert(node(x,y,k));
} 
ll power (ll aa,ll b,ll c) {
	ll res=1;
	aa%=c;
	while (b>0) {
		if (b%2==1) {
			res=res*aa%c;
		}
		b/=2;
		aa=(aa*aa)%c;
	}
	return res;
}
ll query (ll x,ll y,ll k) { //op==3
	IT itr=split(y+1),itl=split(x);
	vector<pair<ll,int> >vec;
	for (;itl!=itr;itl++) {
		vec.push_back(pair<ll,int>(itl->v,itl->r - itl->l + 1));
	}
	sort(vec.begin(),vec.end());
	int cnt;
	for (vector<pair<ll,int> >::iterator it=vec.begin();it!=vec.end();it++) {
		cnt+=it->second;
		if (cnt>=k) {
			return it->first;
		}
	}
	return 1LL;
}
ll sum (ll x,ll y,ll k,ll mod) {
	IT itr=split(y+1),itl=split(x);
	ll ans=0;
	for (;itl!=itr;itl++) {
		ans=(ans+(itl->r - itl->l +1)*power(itl->v,k,mod)%mod)%mod;
	}
	return ans;
}
int main () {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	cin>>n>>m>>seed>>vmax;
	for (int i=1;i<=n;i++) {a[i]=(rnd()%vmax)+1;ODT.insert(node(i,i,a[i]));}
	for (int i=1;i<=m;i++) {
		ll op=(rnd()%4)+1,l=(rnd()%n)+1,r=(rnd()%n)+1,x,y;
		if (l>r) {
			swap(l,r);
		}
		if (op==3) {
			x=(rnd()%(r-l+1))+1;
		}
    	else {
    		x=(rnd()%vmax)+1;
		}
   		if (op==4) {
   			y=(rnd()%vmax)+1;
		}
   		if (op==1) {
   			add(l,r,x);
		}
   		if (op==2) {
   			assign(l,r,ll(x));	
		}
		if (op==3) {
			cout<<query(l,r,x)<<'\n';
		}
		if (op==4) {
			cout<<sum(l,r,x,y)<<'\n';
		}
	}
}
